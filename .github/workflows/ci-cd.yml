name: CI/CD Pipeline with Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: christianprants/desastres

jobs:
  # --------------------------------------------
  # ESTÁGIO 1: Build e Teste
  # --------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Run unit tests
      run: mvn -B test
      
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Start application for integration tests
      run: |
        nohup java -jar target/*.jar &
        echo "Waiting for app to start..."
        sleep 30

    - name: Debug - List test files
      run: find . -name '*CucumberIT.java'

    - name: Run integration tests & BDD Tests
      run: mvn -B failsafe:integration-test failsafe:verify
      
    - name: Stop application
      run: pkill -f 'java -jar'

    - name: Run API Tests
      run: mvn test -Dtest=ApiTests

    - name: Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          target/cucumber-reports.html
          target/surefire-reports
      
    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE }}:latest .
      
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:latest
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  # --------------------------------------------
  # ESTÁGIO 2: Deploy para Staging (Kubernetes)
  # --------------------------------------------
  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Kind and kubectl
        run: |
          # Instala Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Instala kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create Kind cluster for staging
        run: |
          kind create cluster --name staging --config=- <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
          EOF

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          kind get kubeconfig --name staging > ~/.kube/config
          kubectl cluster-info

      - name: Verify cluster readiness
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=120s
          kubectl get nodes

      - name: Deploy to Staging
        run: |
          # Cria namespace se não existir
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Aplica os manifests
          kubectl apply -f k8s/staging-deployment.yaml
          kubectl apply -f k8s/staging-service.yaml
          
          # Verifica os recursos implantados
          kubectl get all -n staging
          kubectl rollout status deployment/app-staging -n staging --timeout=90s

  # --------------------------------------------
  # ESTÁGIO 3: Deploy para Production
  # --------------------------------------------
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Kind and kubectl
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create Kind cluster for production
        run: |
          kind create cluster --name production --config=- <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 80
              hostPort: 81  # Porta diferente para produção
              protocol: TCP
          EOF

      - name: Configure kubeconfig for production
        run: |
          mkdir -p ~/.kube
          kind get kubeconfig --name production > ~/.kube/config
          kubectl cluster-info

      - name: Deploy to Production
        run: |
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/production-deployment.yaml
          kubectl apply -f k8s/production-service.yaml
          kubectl get all -n production
          kubectl rollout status deployment/app-production -n production --timeout=90s

      - name: Clean up clusters (optional)
        if: always()
        run: |
          kind delete cluster --name staging
          kind delete cluster --name production
